from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from database import SQLite_db
from MARKUP import MarkUp


class Registrate(StatesGroup):
    name = State()
    number = State()
    adress = State()


async def registrartion(message: types.Message):
    if not SQLite_db.user_reg(message.from_user.id):
        await Registrate.name.set()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–ò–º—è</b>.\n"
                        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ:\n"
                        "    /stop",
                            reply_markup=MarkUp.stop_keyboard)
    else:
        await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                            "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ:\n"
                            "    /menu", reply_markup=MarkUp.start_keyboard)


async def name(message: types.Message, state: FSMContext):
    if str(message.text).lower() == "stop" or str(message.text).lower() == "/stop".lower() or \
        str(message.text).lower() == "–æ—Ç–º–µ–Ω–∞".lower() or str(message.text).lower() == "/–æ—Ç–º–µ–Ω–∞".lower():
            await message.answer("üóô–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                                 "–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ:\n"
                                 "     /menu",
                                reply_markup=MarkUp.start_keyboard)
            await state.finish()
    elif str(message.text) != "" and str(message.text) != " " and len(str(message.text)) <= 15 and str(message.text) != ".":
        async with state.proxy() as date:
            date['user_id'] = message.from_user.id
            date['name'] = message.text
            await Registrate.next()
            await message.answer("üìû–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ù–æ–º–µ—Ä</b>.\n"
                                 "–ü—Ä–∏–º–µ—Ä: <b>+79XXXXXXXXX</b> –∏–ª–∏ <b>89XXXXXXXXX</b>.\n"
                                    "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ:\n"
                                    "    /stop",
                            reply_markup=MarkUp.stop_keyboard)
    else:
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö‚òπ")
        await Registrate.name.set()


async def number(message: types.Message, state: FSMContext):
    if str(message.text).lower() == "stop".lower() or str(message.text).lower() == "/stop".lower() or \
        str(message.text).lower() == "–û—Ç–º–µ–Ω–∞".lower() or str(message.text).lower() == "/–û—Ç–º–µ–Ω–∞".lower():
            await message.answer("üóô–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                                 "–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ:\n"
                                 "     /menu",
                                reply_markup=MarkUp.start_keyboard)
            await state.finish()
    elif str(message.text) != "" and str(message.text) != " " and\
            (len(str(message.text)) >= 11 and len(str(message.text)) <= 12) and str(message.text) != ".":
        async with state.proxy() as date:
            date['number'] = message.text
            await message.answer("üè†–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ê–¥—Ä–µ—Å</b>(—É–ª–∏—Ü–∞, —Å—Ç—Ä–æ–µ–Ω–∏–µ, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä–∞).\n"
                                 "–ü—Ä–∏–º–µ—Ä: <b>—É–ª.XXXXX XX/X, –ø–æ–¥—ä–µ–∑–¥ XX, –∫–≤.XXXX</b>.\n"
                                 "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ:\n"
                                 "    /stop",
                            reply_markup=MarkUp.stop_keyboard)
            await Registrate.next()
    else:
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö‚òπ")
        await Registrate.number.set()


async def adress(message: types.Message, state: FSMContext):
    if str(message.text).lower() == "stop".lower() or str(message.text).lower() == "/stop".lower() or \
        str(message.text).lower() == "–û—Ç–º–µ–Ω–∞".lower() or str(message.text).lower() == "/–û—Ç–º–µ–Ω–∞".lower():
            await message.answer("üóô–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                                 "–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ:\n"
                                 "     /menu",
                                reply_markup=MarkUp.start_keyboard)
            await state.finish()
    elif str(message.text) != "" and str(message.text) != " " and str(message.text) != ".":
        async with state.proxy() as date:
            date['adress'] = message.text
            await message.reply('‚úÖ–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n'
                                "–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é: <b>/menu</b>.",
                                reply_markup=MarkUp.start_keyboard)
        await SQLite_db.sql_add_c(state)
        await state.finish()
    else:
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö‚òπ")
        await Registrate.adress.set()


def add_users(dispatcher: Dispatcher):
    dispatcher.register_message_handler(registrartion, commands=("registration"), state=None)
    dispatcher.register_message_handler(name, content_types=['text'], state=Registrate.name)
    dispatcher.register_message_handler(number, state=Registrate.number)
    dispatcher.register_message_handler(adress, state=Registrate.adress)