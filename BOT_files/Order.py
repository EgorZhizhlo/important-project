from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from database import SQLite_db
from MARKUP import MarkUp


from Start import start_polling


sp = [" "]


class Order(StatesGroup):
    Product = State()
    yes_or_no = State()


async def make_order(message: types.Message):
    if SQLite_db.user_reg(message.from_user.id):
        await Order.Product.set()
        await message.reply("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ <b>–æ–ø–∏—à–∏—Ç–µ</b> –µ–≥–æ.\n"
                            "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ:\n"
                            "    <b>/stop</b>.",
                            reply_markup=MarkUp.stop_keyboard)
    else:
        await message.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏: <b>/registration</b>")


async def Product(message: types.Message, state: FSMContext):
    if str(message.text) == "/stop" or str(message.text).lower() == "stop" or \
        str(message.text).lower() == "–æ—Ç–º–µ–Ω–∞" or str(message.text).lower() == "/–æ—Ç–º–µ–Ω–∞":
        await message.answer("üóô–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
                            "–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ:\n"
                            "     /menu",
                                reply_markup=MarkUp.start_keyboard)
        await state.finish()
        pass
    elif str(message.text) != "" and str(message.text) != " " and len(str(message.text)) <= 40 and str(message.text) != ".":
        async with state.proxy() as date:
            sp[0] = str(message.text)
        await message.answer('‚úÖ–í–∞—à –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n'
                             '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:\n'
                             f'<b>{message.text}</b>?\n'
                             '–í–≤–µ–¥–∏—Ç–µ: <b>/yes</b> –∏–ª–∏ <b>/no</b>.', reply_markup=MarkUp.y_or_n_keyboard)
        await Order.next()
    else:
        await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö‚òπ")
        await Order.Product.set()


async def yes_or_no(message: types.Message, state: FSMContext):
    m = message.text
    if m == "/yes" or m == "yes" or m.lower() == "–¥–∞" or m.lower() == "/–¥–∞":
        lname = len(str(SQLite_db.get_user_name(message.from_user.id)))
        lnumber = len(str(SQLite_db.get_user_number(message.from_user.id)))
        ladress = len(str(SQLite_db.get_user_adress(message.from_user.id)))

        await start_polling.BOT.send_message("-1001658984157",
                                             f"–ò–º—è: {SQLite_db.get_user_name(message.from_user.id)[:lname - 3]}\n"
                                             f"–¢–µ–ª–µ—Ñ–æ–Ω: {SQLite_db.get_user_number(message.from_user.id)[:lnumber - 3]}\n"
                                             f"–ê–¥—Ä–µ—Å: {SQLite_db.get_user_adress(message.from_user.id)[:ladress - 3]}\n"
                                             f"ID: @{message.from_user.username}\n"
                                             f"–¢–æ–≤–∞—Ä: {str(sp[0])}")
        await message.answer('‚úÖ–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω \n'
                             '–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n'
                             '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ:\n'
                             '    <b>/menu</b>',
                                reply_markup=MarkUp.start_keyboard)
        await state.finish()
    elif m.lower() == "/no" or m.lower() == "no" or m.lower() == "/–Ω–µ—Ç" or m.lower() == "–Ω–µ—Ç":
        await message.answer('üóô–ó–∞–∫–∞–∑ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω \n'
                             '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ:\n'
                             '    <b>/menu</b>',
                                reply_markup=MarkUp.start_keyboard)
        await state.finish()
    else:
        await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª\n"
                             "–í–≤–µ–¥–∏—Ç–µ: <b>/yes</b> –∏–ª–∏ <b>/no</b>.", reply_markup=MarkUp.y_or_n_keyboard)
        await Order.yes_or_no.set()


def add_order(dispatcher: Dispatcher):
    dispatcher.register_message_handler(make_order, commands=("make_order"), state=None)
    dispatcher.register_message_handler(Product, state=Order.Product)
    dispatcher.register_message_handler(yes_or_no, state=Order.yes_or_no)
